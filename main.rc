#[link(name = "rustyturtle", vers="0.1", author="cscott")];
extern mod std;

mod intern;
mod op;
mod function;
mod object;
mod startup;
mod module;
mod interp;

fn print_jsval(env: &interp::Environment, v: object::JsVal) {
    match v {
        object::JsThrown(ex) => {
            // if there's a 'message' field of the thrown object,
            // print that.
            let msg = match env.get_slot(*ex,
                                         object::JsVal::from_str("message")) {
                object::JsUndefined => *ex,
                v => v
            };
            io::println(fmt!("* %s", env.toString(msg).to_str()));
        },
        _ => io::println(env.toString(v).to_str())
    };
}

fn main() {
    use std::rl;

    let i = interp::Interpreter::new();

    let args = os::args();
    if args.len() <= 1 {
        // repl!
        loop {
            let line = unsafe { rl::read("> ") };
            match line {
                None => break,
                Some(s) => {
                    unsafe { rl::add_history(s) };
                    let rv = i.repl(s);
                    print_jsval(i.env, rv);
                }
            }
        }
    } else {
        // whole file.
        // XXX implement line-at-a-time mode where we echo after each
        //     line of input (doctest style?)
        match io::file_reader(&path::PosixPath(args[1])) {
            Err(msg) => fail!(fmt!("Could not read %s: %s", args[1], msg)),
            Ok(reader) => {
                let bytes = reader.read_whole_stream();
                let source = str::from_bytes(bytes);
                let rv = i.interpret(source);
                match rv {
                    object::JsUndefined => { /* suppress printout */ },
                    _ => print_jsval(i.env, rv)
                };
            }
        }
    }
}
